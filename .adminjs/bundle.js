(function (React, designSystem) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    const ImageUploadButton = () => {
      const [selectedImage, setSelectedImage] = React.useState(null);
      const [imageUrl, setImageUrl] = React.useState("");
      const [isCopied, setIsCopied] = React.useState(false);
      const handleImageChange = event => {
        const file = event.target.files[0];
        // You can perform additional validation or processing here if needed

        setSelectedImage(file);
      };
      const handleUpload = async () => {
        // You can implement the logic to upload the selectedImage here
        console.log("Upload logic goes here:", selectedImage);
        try {
          const formData = new FormData();
          formData.append('image', selectedImage);
          const currentUrl = window.location.href;
          const currentUrlParts = currentUrl.split('/');
          const postUrl = currentUrlParts.slice(0, currentUrlParts.length - 1).join('/') + '/uploadImage';
          console.log(postUrl);
          const response = await fetch(postUrl, {
            method: 'POST',
            body: formData
          });
          if (response.ok) {
            const responseData = await response.json();
            console.log(responseData);
            setImageUrl(responseData.imageUrl);
            console.log('Image uploaded successfully:', responseData);
          } else {
            console.error('Error uploading image:', response.statusText);
          }
        } catch (error) {
          console.error('Error uploading image:', error);
        }
      };
      const handleCopyToClipboard = () => {
        navigator.clipboard.writeText(imageUrl).then(() => {
          setIsCopied(true);
          setTimeout(() => setIsCopied(false), 2000);
        }).catch(error => console.error('Failed to copy text:', error));
      };
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        marginTop: "20px"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
        type: "file",
        accept: "image/*",
        onChange: handleImageChange
      }), selectedImage && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        marginTop: "10px",
        padding: "10px",
        border: "2px solid #ccc",
        borderRadius: "8px",
        backgroundColor: "#f9f9f9",
        maxWidth: "80%",
        wordBreak: "break-all",
        textAlign: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        margin: "0 0 10px 0",
        fontSize: "16px",
        color: "#333"
      }, "Preview:"), /*#__PURE__*/React__default.default.createElement("img", {
        src: URL.createObjectURL(selectedImage),
        alt: "Preview",
        style: {
          maxWidth: '100%',
          maxHeight: '300px',
          marginBottom: '10px'
        }
      }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        display: "block",
        marginTop: "10px"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        variant: "primary",
        onClick: handleUpload
      }, "Upload Image"))), imageUrl && /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        marginTop: "10px",
        padding: "10px",
        border: "2px solid #ccc",
        borderRadius: "8px",
        backgroundColor: "#f9f9f9",
        maxWidth: "80%",
        wordBreak: "break-all",
        textAlign: "center"
      }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
        margin: "0 0 10px 0",
        fontSize: "16px",
        color: "#333"
      }, "Image URL: ", imageUrl), /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
        variant: "primary",
        onClick: handleCopyToClipboard
      }, isCopied ? 'Copied!' : 'Copy to Clipboard')));
    };
    const Dashboard = () => {
      return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
        marginBottom: "200px"
      }, /*#__PURE__*/React__default.default.createElement("section", {
        style: {
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          marginTop: "32px"
        }
      }, /*#__PURE__*/React__default.default.createElement("p", {
        style: {
          // fontSize: "3rem",
        }
      }, /*#__PURE__*/React__default.default.createElement("span", {
        style: {
          fontSize: "3rem",
          fontWeight: "700"
        }
      }, "OneStop"), /*#__PURE__*/React__default.default.createElement("span", {
        style: {
          fontSize: "3rem",
          fontWeight: "normal",
          color: "#282828"
        }
      }, " ", "Admin"))), /*#__PURE__*/React__default.default.createElement(ImageUploadButton, null));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.Dashboard = Dashboard;

})(React, AdminJSDesignSystem);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
